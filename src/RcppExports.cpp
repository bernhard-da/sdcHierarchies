// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_all_nodes
/* returns all possible nodes */ CharacterVector rcpp_all_nodes(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_all_nodes(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_all_nodes(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_rootnode
/* returns the name of the root node */ CharacterVector rcpp_rootnode(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_rootnode(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_rootnode(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_is_rootnode
/* returns true if the specified leaf is the rootnode */ bool rcpp_is_rootnode(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_is_rootnode(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_is_rootnode(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_children
/* returns all direct children of the given leaf */ CharacterVector rcpp_children(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_children(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_children(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parent
CharacterVector rcpp_parent(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_parent(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parent(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_siblings
/* returns the siblings of the given leaf */ CharacterVector rcpp_siblings(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_siblings(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_siblings(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_exists
/* returns true, if the leaf exists in the tree */ bool rcpp_exists(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_exists(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_exists(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_bogus_codes
/* a list with bogus codes and its parent levels */ List rcpp_bogus_codes(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_bogus_codes(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_bogus_codes(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_replace_with_bogusparent
/* utility fn to replace bogus codes with corrent parent codes */ CharacterVector rcpp_replace_with_bogusparent(List bogus_info, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_replace_with_bogusparent(SEXP bogus_infoSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type bogus_info(bogus_infoSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_replace_with_bogusparent(bogus_info, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_leafinfo
/* basically all information required except for contributing leafs */ List rcpp_leafinfo(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_leafinfo(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_leafinfo(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_level
/* numeric level of the given leaf */ int rcpp_level(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_level(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_level(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_levels
IntegerVector rcpp_levels(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_levels(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_levels(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_nr_levels
int rcpp_nr_levels(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_nr_levels(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_nr_levels(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_path
/* returns a character-vector with the path from total to leaf */ CharacterVector rcpp_path(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_path(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_path(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_is_bogus
bool rcpp_is_bogus(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_is_bogus(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_is_bogus(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_all_leaves
CharacterVector rcpp_all_leaves(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_all_leaves(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_all_leaves(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_contains_hier
bool rcpp_contains_hier(DataFrame tree, CharacterVector leaf, CharacterVector upper);
RcppExport SEXP _sdcHierarchies_rcpp_contains_hier(SEXP treeSEXP, SEXP leafSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_contains_hier(tree, leaf, upper));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_contributing_leaves
CharacterVector rcpp_contributing_leaves(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_contributing_leaves(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_contributing_leaves(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_is_minimal_code
LogicalVector rcpp_is_minimal_code(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_is_minimal_code(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_is_minimal_code(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_minimal_codes
CharacterVector rcpp_minimal_codes(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_minimal_codes(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_minimal_codes(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_is_subtotal
LogicalVector rcpp_is_subtotal(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_is_subtotal(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_is_subtotal(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_subtotals
CharacterVector rcpp_subtotals(DataFrame tree);
RcppExport SEXP _sdcHierarchies_rcpp_subtotals(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_subtotals(tree));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_prune
DataFrame rcpp_prune(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_prune(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_prune(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_info
List rcpp_info(DataFrame tree, CharacterVector leaf);
RcppExport SEXP _sdcHierarchies_rcpp_info(SEXP treeSEXP, SEXP leafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type leaf(leafSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_info(tree, leaf));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sdcHierarchies_rcpp_all_nodes", (DL_FUNC) &_sdcHierarchies_rcpp_all_nodes, 1},
    {"_sdcHierarchies_rcpp_rootnode", (DL_FUNC) &_sdcHierarchies_rcpp_rootnode, 1},
    {"_sdcHierarchies_rcpp_is_rootnode", (DL_FUNC) &_sdcHierarchies_rcpp_is_rootnode, 2},
    {"_sdcHierarchies_rcpp_children", (DL_FUNC) &_sdcHierarchies_rcpp_children, 2},
    {"_sdcHierarchies_rcpp_parent", (DL_FUNC) &_sdcHierarchies_rcpp_parent, 2},
    {"_sdcHierarchies_rcpp_siblings", (DL_FUNC) &_sdcHierarchies_rcpp_siblings, 2},
    {"_sdcHierarchies_rcpp_exists", (DL_FUNC) &_sdcHierarchies_rcpp_exists, 2},
    {"_sdcHierarchies_rcpp_bogus_codes", (DL_FUNC) &_sdcHierarchies_rcpp_bogus_codes, 1},
    {"_sdcHierarchies_rcpp_replace_with_bogusparent", (DL_FUNC) &_sdcHierarchies_rcpp_replace_with_bogusparent, 2},
    {"_sdcHierarchies_rcpp_leafinfo", (DL_FUNC) &_sdcHierarchies_rcpp_leafinfo, 2},
    {"_sdcHierarchies_rcpp_level", (DL_FUNC) &_sdcHierarchies_rcpp_level, 2},
    {"_sdcHierarchies_rcpp_levels", (DL_FUNC) &_sdcHierarchies_rcpp_levels, 1},
    {"_sdcHierarchies_rcpp_nr_levels", (DL_FUNC) &_sdcHierarchies_rcpp_nr_levels, 1},
    {"_sdcHierarchies_rcpp_path", (DL_FUNC) &_sdcHierarchies_rcpp_path, 2},
    {"_sdcHierarchies_rcpp_is_bogus", (DL_FUNC) &_sdcHierarchies_rcpp_is_bogus, 2},
    {"_sdcHierarchies_rcpp_all_leaves", (DL_FUNC) &_sdcHierarchies_rcpp_all_leaves, 1},
    {"_sdcHierarchies_rcpp_contains_hier", (DL_FUNC) &_sdcHierarchies_rcpp_contains_hier, 3},
    {"_sdcHierarchies_rcpp_contributing_leaves", (DL_FUNC) &_sdcHierarchies_rcpp_contributing_leaves, 2},
    {"_sdcHierarchies_rcpp_is_minimal_code", (DL_FUNC) &_sdcHierarchies_rcpp_is_minimal_code, 1},
    {"_sdcHierarchies_rcpp_minimal_codes", (DL_FUNC) &_sdcHierarchies_rcpp_minimal_codes, 1},
    {"_sdcHierarchies_rcpp_is_subtotal", (DL_FUNC) &_sdcHierarchies_rcpp_is_subtotal, 1},
    {"_sdcHierarchies_rcpp_subtotals", (DL_FUNC) &_sdcHierarchies_rcpp_subtotals, 1},
    {"_sdcHierarchies_rcpp_prune", (DL_FUNC) &_sdcHierarchies_rcpp_prune, 2},
    {"_sdcHierarchies_rcpp_info", (DL_FUNC) &_sdcHierarchies_rcpp_info, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_sdcHierarchies(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
